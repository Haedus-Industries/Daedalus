plugins {
    id 'com.github.johnrengelman.shadow' version "${shadowPluginVersion}"
    id 'java'
    id 'idea'
}

sourceCompatibility = targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'project.daedalus.Main'
}

def versionFile = file('build/version.properties')
if (!versionFile.exists()) {
    versionFile.createNewFile()
}
Properties versionProps = new Properties()

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.ow2.asm:asm:${asmVersion}"
    implementation "org.ow2.asm:asm-tree:${asmVersion}"
    implementation "org.ow2.asm:asm-commons:${asmVersion}"
    implementation "org.ow2.asm:asm-util:${asmVersion}"

    implementation "info.picocli:picocli:${picocliVersion}"
    implementation "org.apache.commons:commons-compress:${commonsCompressVersion}"
    implementation "org.tukaani:xz:${xzVersion}"

    implementation("com.github.oshi:oshi-core:${oshiVersion}") {
        exclude group: 'org.slf4j'
    }
    implementation("org.simpleframework:simple-xml:${simpleXmlVersion}") {
        exclude group: 'xpp3'
        exclude group: 'stax'
    }
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "org.slf4j:slf4j-nop:${slf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

shadowJar {
    archiveClassifier.set(null)
    relocate "oshi", "cn.myj2c.library.oshi"
    relocate "picocli", "cn.myj2c.library.picocli"
    relocate "ch.qos", "cn.myj2c.library"
    relocate "com.ctc", "cn.myj2c.library"
    relocate "com.fasterxml", "cn.myj2c.library"
    relocate "org.apache", "cn.myj2c.library"
    relocate "org.simpleframework", "cn.myj2c.library"
    relocate "com.google", "cn.myj2c.library"
    relocate "org.codehaus", "cn.myj2c.library"
    relocate "org.objectweb", "cn.myj2c.library"
}

assemble.dependsOn(shadowJar)

jar {
    manifest.attributes("Main-Class": getProperty('mainClass'))
}

tasks.register('obfusticate', Exec) {
    commandLine 'java', '-jar', 'allatori/allatori.jar', 'allatori/config.xml'
}

tasks.register('obfusticateClean', Delete) {
    delete '.\\build\\libs\\myj2c.jar'
}

tasks.register('complete') {
    doLast {
        println("Launcher has been built")
    }
}

obfusticate.dependsOn shadowJar
obfusticate.mustRunAfter shadowJar
obfusticateClean.dependsOn obfusticate
obfusticateClean.mustRunAfter obfusticate

complete.dependsOn shadowJar
complete.dependsOn obfusticate
complete.mustRunAfter obfusticate

tasks.register('updateVersion') {
    versionProps.load(new FileInputStream(versionFile))
    def date = new Date().format("yyyy.MMdd", TimeZone.getTimeZone("GMT+08:00"));
    def buildNum = 1
    if (versionProps['build_date'] == null) {
        versionProps['build_date'] = date
    } else if (versionProps['build_date'] != date) {
        versionProps['build_date'] = date
        versionProps['build_number'] = "00"
    }
    if (versionProps['build_number'] == null) {
        versionProps['build_number'] = "0" + buildNum.toString()
    } else {
        buildNum = versionProps['build_number'].toInteger()
        buildNum++
        if (buildNum <= 9) {
            versionProps['build_number'] = "0" + buildNum.toString()
        } else {
            versionProps['build_number'] = buildNum.toString()
        }
    }
    versionProps.store(versionFile.newWriter(), null)
    def versionFileDir = projectDir.getAbsolutePath() + File.separatorChar + 'src' + File.separatorChar + 'main' + File.separatorChar + 'java' + File.separatorChar + 'project' + File.separatorChar + 'daedalus' + File.separatorChar + 'Main.java';
    println versionFileDir;
    def oldVersionStr = findOldVersionStr(versionFileDir);
    println oldVersionStr;
    def newVersionValue = getNewVersionValue();
    def newVersionStr = "    public static final String VERSION = \"" + newVersionValue + "." + (buildNum < 10 ? "0" + buildNum : buildNum) + "\";"
    println newVersionStr;
    def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr);
    new File(versionFileDir).write(updatedContent, 'UTF-8')
}

static def findOldVersionStr(path) {
    def readerString = ""
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("String VERSION")) {
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}

static def getNewVersionValue() {
    def date = new Date().format("yyyy.MMdd", TimeZone.getTimeZone("GMT+08:00"));
    return date;
}

compileJava {
    dependsOn updateVersion
}
